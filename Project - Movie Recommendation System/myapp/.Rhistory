NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM, data = data)
summary(lm1)
data= read.csv('C:\\Users\\Harsh Darji\\Desktop\\F18Q123V2.csv', header=TRUE, sep=",")
lm1<-lm(logmove~logprice+BRAND+Season+BRAND*logprice+Feat+
AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+
NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM, data = data)
summary(lm1)
Predict(lm1,interval="prediction,level=0.90",newdata=data)
predict(lm1,interval="prediction,level=0.90",newdata=data)
predict(lm1,interval="prediction",level="0.90",newdata=data)
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+
AGE9+AGE60+EDUC+ETHNIC+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+
AGE9+AGE60+EDUC+ETHNIC+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM,data=data
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM,data=data
lm2<-lm(ogmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM,
data=data)
lm2<-lm(logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM,
data=data)
summary(lm2)
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: lm2
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+
AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+
NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+
NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
Linear hypthesis test
Hypothesis:
HHLARGE=0
HVAL150=0
INCOME=0
NOCAR=0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
Linear hypthesis test
inear hypthesis test
Hypothesis:
HHLARGE = 0
HVAL150 = 0
INCOME = 0
NOCAR = 0
Model 1: lm1
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
Linear hypthesis test
Hypothesis:
HHLARGE = 0
HVAL150 = 0
INCOME = 0
NOCAR = 0
Model 1: restricted model
Model 2: logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
lm1<-lm(logmove~logprice+BRAND+Season+BRAND*logprice+Feat+
AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+INCOME+
NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM, data = data)
summary(lm1)
Linear hypothesis test
Hypothesis:
HHLARGE = 0
HVAL150 = 0
INCOME = 0
NOCAR = 0
Model 1:restricted model
Model 2:logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+
INCOME+NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
Linear hypothesis test
Hypothesis:
HHLARGE = 0
HVAL150 = 0
INCOME = 0
NOCAR = 0
Model 1:restricted model
Model 2:logmove~logprice+BRAND+Season+BRAND*logprice+Feat+AGE9+AGE60+EDUC+ETHNIC+HHLARGE+HVAL150+
INCOME+NOCAR+POVERTY+RETIRED+SINGLE+UNEMP+WORKWOM
linearHypothesis(modelfeat,h,rhs=r)
## Test linear Hypothesis, p<0.05, coefficient for 3 brands are different
c1=c(0,0,0,0,1,0)
c2=c(0,0,0,0,0,1)
h=rbind(c1,c2)
r=c(0,0)
library(car)
linearHypothesis(modelfeat,h,rhs=r)
ojdata= read.csv("R data.csv", header=TRUE, sep=",")
attach(ojdata)
updateR()
install.packages("installr")
library(installr)
updateR()
#3
glm1<-glm(Feat~BRAND+Season)
#3
glm1<-glm(Feat~BRAND+Season,data=data)
summary(glm1)
confint(glm1,level=0.99,type="LR")
data=read.csv("C:\\Users\\Harsh Darji\\Desktop\\train.csv", header=TRUE)
summary(data$Pclass)
summary(factor(data$Pclass))
table(data$Pclass)[which.max(table(data$Pclass))]
data_mode<-table(data$Pclass)[which.max(table(data$Pclass))]
data_median<- median(data$Pclass)
data=read.csv("C:\\Users\\Harsh Darji\\Desktop\\train.csv", header=TRUE)
summary(factor(data$Pclass))
data_mode<-table(data$Pclass)[which.max(table(data$Pclass))]
data_mode
data_median<- median(data$Pclass)
daat_median
data=read.csv("C:\\Users\\Harsh Darji\\Desktop\\train.csv", header=TRUE)
summary(factor(data$Pclass))
data_mode<-table(data$Pclass)[which.max(table(data$Pclass))]
data_mode
data_median<- median(data$Pclass)
data_median
data=read.csv("C:\\Users\\Harsh Darji\\Desktop\\train.csv", header=TRUE)
summary(factor(data$Pclass))
data_mode<-table(data$Pclass)[which.max(table(data$Pclass))]
data_mode
data_median<- median(data$Pclass)
data_median
hist(data$fare[which(data$Pclass==3)])
hist(data$Fare[which(data$Pclass==3)])
boxplot(data$Fare[which(data$Pclass==3)])
table(data$Embarked, data$Survived)
x<-table(data$Embarked, data$Survived)
plot(x)
average_fare<-aggregate(data$Fare,by=list(data$Sex),FUN=mean)
average_fare
View(data)
max(daat$fare)
max(data$fare)
max(data$Fare)
min(data$Fare)
labels = c('very low fare', 'low fare', 'medium fare', 'high fare')
data$Fare_discretization <- cut (data$Fare, breaks = c(0, 200,400,600),labels = c('very low fare', 'low fare', 'medium fare', 'high fare')
data$Fare_discretization
data$Fare_discretization
View(data)
data$Fare_discretization <- cut (data$Fare, breaks = c(0, 200,400,600),labels = c('very low fare', 'low fare', 'medium fare', 'high fare')
View(data)
data$Fare_discretization <- cut (data$Fare, breaks = c(0,200,400,600),labels = c('very low fare', 'low fare', 'medium fare', 'high fare')
View(data)
data$age_discretization <- cut (data$Age, breaks = c(0, 10, 20, 30, 40, 50, 60, Inf), labels = c('kid', 'teen', 'twenties', 'thirties', 'fourties', 'fifties', 'sixties & above'))
View(data)
random_sample <- data[sample(1:nrow(data), 100, replace=FALSE),]
systematic_Sample <- data[seq(1, nrow(data), 5),]
View(random_sample)
View(systematic_Sample)
systematic_Sample <- data[seq(1, nrow(data), 1),]
View(systematic_Sample)
systematic_Sample <- data[seq(1, nrow(data), 3),]
View(systematic_Sample)
View(random_sample)
systematic_Sample <- data[seq(1, nrow(data), 100,3),]
systematic_Sample <- data[seq(1, nrow(data), 100),]
View(systematic_Sample)
systematic_Sample <- data[seq(1, nrow(data), 9),]
View(systematic_Sample)
View(random_sample)
library(ggplot2)
library(Rweka)
ibrary(shiny)
library(shiny)
install.packages('shiny')
library(shiny)
install.packages('proxy')
library(proxy)
library(recommenderlab)
library(reshape2)
library(proxy)
library(recommenderlab)
library(reshape2)
install.packages('proxy')
install.packages('recommenderlab')
library(recommenderlab)
install.packages('proxy')
library(proxy)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("shiny")
shiny::runApp('C:/Users/Harsh Darji/Desktop')
runApp('C:/Users/Harsh Darji/Desktop')
runApp('C:/Users/Harsh Darji/Desktop')
shiny::runApp('C:/Users/Harsh Darji/Desktop')
getwd()
runApp()
runApp()
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='<SECRET>')
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER')
library(rsconnect)
rsconnect::deployApp()
shiny::runApp()
shiny::runApp()
library(shiny)
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER'
library(rsconnect)
rsconnect::deployApp()
rsconnect::deployApp('C://Users//Harsh Darji//Documents')
library(rsconnect)
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER')
library(rsconnect)
rsconnect::deployApp('C://Users//Harsh Darji//Documents')
library(rsconnect)
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER')
library(rsconnect)
rsconnect::deployApp('C://Users//Harsh Darji//Documents//ui.r')
library(rsconnect)
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER')
library(rsconnect)
rsconnect::deployApp('C://Users//Harsh Darji//Documents')
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER')
deployApp()
rsconnect::deployApp('C://Users//Harsh Darji//Documents')
rsconnect::deployApp('C://Users//Harsh Darji//Documents//myapp')
rsconnect::setAccountInfo(name='harshdarji',
token='98AAEBAE8BC4F8FEDD8FAAB4794B5160',
secret='6TWgIFeioyqtJyzTCidY+KcTOcraIQcR+16ENDER')
rsconnect::deployApp('C://Users//Harsh Darji//Documents//myapp')
setwd('C://Users//Harsh Darji//Documents//myapp')
install.packages('proxy')
install.packages('rshiny')
install.packages('reshape2')
install.packages('recommenderlab')
install.packages('rsconnect')
shiny::runApp()
runApp()
shiny::runApp()
setwd('C://Users//Harsh Darji//Documents//myapp')
install.packages('proxy')
install.packages('rshiny')
install.packages('reshape2')
install.packages('recommenderlab')
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp()
runApp()
install.packages("rsconnect")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("proxy")
runApp()
runApp()
shiny::runApp()
library(proxy)
install.packages('proxy')
library(proxy)
runApp()
runApp()
runApp()
library(shiny)
#install.packages('reshape2','proxy')
#install.packages('proxy')
library(proxy)
#install.packages('recommenderlab')
#install.packages('reshape2')
library(recommenderlab)
library(reshape2)
source("helpercode.r")
shinyServer(function(input, output) {
output$table <- renderTable({
movie_recommendation(input$select, input$select2, input$select3)
})
}
runApp()
runApp()
movies2 <- read.csv("C://Users//Harsh Darji//Documents//myapp//movies.csv",  header = TRUE, stringsAsFactors=FALSE)
shinyUI(fluidPage(
titlePanel("Movie Recommendation Engine"),
fluidRow(
column(5,
selectInput("select", label = h3("Choose Three Movies You Like"),
choices = as.character(movies2$title[1:5000])),
selectInput("select2", label = NA,
choices = as.character(movies2$title[1:5000])),
selectInput("select3", label = NA,
choices = as.character(movies2$title[1:5000])),
submitButton("Submit")
),
column(7,
h3("You Might Like These Too!"),
tableOutput("table"))
)
))
#server.R
library(shiny)
library(proxy)
library(recommenderlab)
library(reshape2)
source("helpercode.R")
shinyServer(function(input, output) {
output$table <- renderTable({
movie_recommendation(input$select, input$select2, input$select3)
})
}
)
#ui.R
library(shiny)
movies2 <- read.csv("C://Users//Harsh Darji//Documents//myapp//movies.csv",  header = TRUE, stringsAsFactors=FALSE)
shinyUI(fluidPage(
titlePanel("Movie Recommendation Engine"),
fluidRow(
column(5,
selectInput("select", label = h3("Choose Three Movies You Like"),
choices = as.character(movies2$title[1:5000])),
selectInput("select2", label = NA,
choices = as.character(movies2$title[1:5000])),
selectInput("select3", label = NA,
choices = as.character(movies2$title[1:5000])),
submitButton("Submit")
),
column(7,
h3("You Might Like These Too!"),
tableOutput("table"))
)
))
########################################################################
#server.R
library(shiny)
library(proxy)
library(recommenderlab)
library(reshape2)
source("helpercode.R")
shinyServer(function(input, output) {
output$table <- renderTable({
movie_recommendation(input$select, input$select2, input$select3)
})
}
)
#ui.R
library(shiny)
movies2 <- read.csv("C://Users//Harsh Darji//Documents//myapp//movies.csv",  header = TRUE, stringsAsFactors=FALSE)
shinyUI(fluidPage(
titlePanel("Movie Recommendation Engine"),
fluidRow(
column(5,
selectInput("select", label = h3("Choose Three Movies You Like"),
choices = as.character(movies2$title[1:5000])),
selectInput("select2", label = NA,
choices = as.character(movies2$title[1:5000])),
selectInput("select3", label = NA,
choices = as.character(movies2$title[1:5000])),
submitButton("Submit")
),
column(7,
h3("You Might Like These Too!"),
tableOutput("table"))
)
))
########################################################################
#server.R
library(shiny)
library(proxy)
library(recommenderlab)
library(reshape2)
source("helpercode.R")
shinyServer(function(input, output) {
output$table <- renderTable({
movie_recommendation(input$select, input$select2, input$select3)
})
}
)
############################################################################################
library(proxy)
library(recommenderlab)
library(reshape2)
movies2 <- read.csv("C://Users//Harsh Darji//Documents//myapp//movies.csv", header = TRUE, stringsAsFactors=FALSE)
ratings <- read.csv("C://Users//Harsh Darji//Documents//myapp//ratingss.csv", header = TRUE)
movie_recommendation <- function(input,input2,input3) {
row_num <- which(movies2[,2] == input)
row_num2 <- which(movies2[,2] == input2)
row_num3 <- which(movies2[,2] == input3)
userSelect <- matrix(NA,8552)
userSelect[row_num] <- 5 #hard code first selection to rating 5
userSelect[row_num2] <- 4 #hard code second selection to rating 4
userSelect[row_num3] <- 3 #hard code third selection to rating 3
userSelect <- t(userSelect)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- ratingmat[,-1]
colnames(userSelect) <- colnames(ratingmat)
ratingmat2 <- rbind(userSelect,ratingmat)
ratingmat2 <- as.matrix(ratingmat2)
#Convert rating matrix into a sparse matrix
ratingmat2 <- as(ratingmat2, "realRatingMatrix")
#Create Recommender Model. "UBCF" stands for user-based collaborative filtering
recommender_model <- Recommender(ratingmat2, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat2[1], n=10)
recom_list <- as(recom, "list")
recom_result <- data.frame(matrix(NA,10))
for (i in c(1:10)){
recom_result[i,1] <- movies2[as.integer(recom_list[[1]][i]),2]
}
colnames(recom_result) <- "User-Based Collaborative Filtering Recommended Titles"
return(recom_result)
}
runApp()
shiny::runApp()
library(proxy)
library(recommenderlab)
library(reshape2)
movies <- read.csv("C:/Users/Harsh Darji/Desktop/myapp/movies.csv", header = TRUE, stringsAsFactors=FALSE)
ratings <- read.csv("C:/Users/Harsh Darji/Desktop/myapp/ratingss.csv", header = TRUE)
movies2 <- movies[-which((movies$movieId %in% ratings$movieId) == FALSE),]
movie_recommendation <- function(input,input2,input3) {
#input = "Gladiator (2000)"
#input2 = "Aeon Flux (2005)"
#input3 = "Alexander (2004)"
row_num <- which(movies2[,2] == input)
row_num2 <- which(movies2[,2] == input2)
row_num3 <- which(movies2[,2] == input3)
userSelect <- matrix(NA,10325)
userSelect[row_num] <- 5 #hard code first selection to rating 5
userSelect[row_num2] <- 4 #hard code second selection to rating 4
userSelect[row_num3] <- 3 #hard code third selection to rating 3
userSelect <- t(userSelect)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- ratingmat[,-1]
colnames(userSelect) <- colnames(ratingmat)
ratingmat2 <- rbind(userSelect,ratingmat)
ratingmat2 <- as.matrix(ratingmat2)
#Convert rating matrix into a sparse matrix
ratingmat2 <- as(ratingmat2, "realRatingMatrix")
#Create Recommender Model. "UBCF" stands for user-based collaborative filtering
recommender_model <- Recommender(ratingmat2, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat2[1], n=10)
recom_list <- as(recom, "list")
no_result <- data.frame(matrix(NA,1))
recom_result <- data.frame(matrix(NA,10))
if (as.character(recom_list[1])=='character(0)'){
no_result[1,1] <- "Sorry, there is not enough information in our database on the movies you've selected. Try to select different movies you like."
colnames(no_result) <- "No results"
return(no_result)
} else {
for (i in c(1:10)){
recom_result[i,1] <- as.character(subset(movies,
movies$movieId == as.integer(recom_list[[1]][i]))$title)
}
colnames(recom_result) <- "User-Based Collaborative Filtering Recommended Titles"
return(recom_result)
}
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
